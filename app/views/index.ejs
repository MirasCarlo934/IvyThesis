<!DOCTYPE html>
<html lang="en">

<head>
    <title/>IvyThesis</title>
    <!-- Latest compiled and minified CSS -->
    <style>
        html {
            background: url(img/background.jpg) no-repeat center center fixed;
            -webkit-background-size: cover;
            -moz-background-size: cover;
            -o-background-size: cover;
            background-size: cover;
        }
        div#gradient {
            background: linear-gradient(to bottom, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0));
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 40%;
            z-index: -1;
        }
        div#board {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: scroll;
            z-index: 1;
        }
        div {
            font-family: "Nunito", sans-serif;
        }

        div.board-category {
            min-width: 298px; /*section min width*/
        }
        div.board-category-name {
            color: white;
            font-weight: lighter;
            letter-spacing: 2px;
            cursor: pointer;
        }
        div.board-category-name:hover {
            color: #cccccc;
            text-transform: capitalize;
        }
        div.board-category-name-line {
            width: 100%;
            border-bottom: 0.5px solid #000;
            line-height: 0.05em;
        }
        .board-category-title-hr {
            border: 1px solid white;
            opacity: 1;
        }

        div.board-section {
            background-color: rgba(255, 255, 255, 0.102);
            border-radius: 8px;
            min-width: 298px; /*250 card width + 32 LR list pad + 16 R list margin*/
            backdrop-filter: blur(4px);
            -webkit-backdrop-filter: blur(4px);
        }
        div.board-section-name {
            padding: 2px 16px 34px 16px;
            margin-bottom: -32px;
            background-color: #cfcfcf;
            border-radius: 8px;
            /*backdrop-filter: blur(4px);*/
            /*-webkit-backdrop-filter: blur(4px);*/

            letter-spacing: 1.5px;
            font-size: small;
            font-weight: bold;
            cursor: pointer;
            text-transform: capitalize;
        }
        div.board-section-name:hover {
            background-color: rgba(255, 255, 255, 0.85);
        }

        div.board-list {
            /*position: relative !important;*/
            background-color: rgba(255, 255, 255, 0.3);
            box-shadow: 0px 0px 12px 0px rgba(0, 0, 0, 0.16);
            border-radius: 8px;
            /*backdrop-filter: blur(4px);*/
            /*-webkit-backdrop-filter: blur(4px);*/
            /*z-index: 0 !important;*/
        }
        /*div.board-list::before {*/
        /*    content: '';*/
        /*    margin: -500px;*/
        /*    position: relative;*/
        /*    top: 0;*/
        /*    right: 0;*/
        /*    bottom: 0;*/
        /*    left: 0;*/
        /*    filter: blur(20px);*/
        /*    z-index: 1;*/
        /*}*/
        div.board-list-name {
            border-radius: 8px 8px 0 0;
            background-color: rgb(255, 255, 255);
            cursor: pointer;
            font-size: large;
            font-weight: bold;
            padding: 4px 16px 4px 16px;
        }
        div.board-list-name:hover {
            background-color: #cccccc;
        }
        div.board-list-content {
            /*position: relative !important;*/
            /*z-index: 100 !important;*/
        }
        /*div.board-list-background {*/
        /*    position: relative;*/
        /*    filter: blur(20px);*/
        /*    z-index: -1;*/
        /*}*/

        div.board-card {
            /*position: relative !important;*/
            border-radius: 8px;
            background-color: rgba(255, 255, 255, 0.85);
            box-shadow: 0px 5px 5px 0px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            padding: 4px 4px !important;
            backdrop-filter: blur(4px);
            -webkit-backdrop-filter: blur(4px);
            /*z-index: 1000 !important;*/
        }
        div.board-card:hover {
            background-color: #cccccc;
        }

        button.board-list-add-btn {
            border-radius: 8px;
            background-color: rgba(255, 255, 255, 0.3);
            box-shadow: 0px 0px 12px 0px rgba(0, 0, 0, 0.25);
            /*backdrop-filter: blur(4px);*/
            /*-webkit-backdrop-filter: blur(4px);*/
        }
        button.board-list-add-btn:hover {
            background-color: rgba(255, 255, 255, 0.85);
        }

        #board-modal-name-input, #board-modal-description-input {
            border-radius: 5px;
            border-color: rgba(0, 0, 0, 0);
            background-color: rgb(239, 239, 239);
        }

        #board-modal-parent-menu {
            border-width: 1px;
            border-color: rgb(127, 127, 127);
            border-style: solid;
            border-radius: 5px;
            background-color: rgba(0, 0, 0, 0);
        }

        .modal-title {
            font-weight: bold !important;
        }
        .modal-content {
            border-radius: 10px;
            padding: 32px !important;
            background-color: rgb(255, 255, 255);
        }
        .modal-subdiv {
            padding-left: 32px;
        }
        .modal-label {
            font-weight: bold;
        }
        .modal-sublabel {
            color: #7f7f7f;
            letter-spacing: 1px !important;
            font-size: small !important;
            font-weight: bold !important;
            text-transform: uppercase;
        }

        .card, .card-filler {
            width: 250px;
        }

        .card-body {
            padding: 8px 16px !important;
        }

        .board-btn {
            text-align: center;
            font-size: small !important;
            font-weight: bold !important;
            letter-spacing: 1px !important;
            transition: background-color 0.5s;
        }
        .board-btn-green {
            background-color: #7aec6d !important;
            color: white !important;
        }
        .board-btn-green:hover {
            background-color: #62bf58 !important;
        }
        .board-btn-menu {
            border: 1px solid white !important;
            border-radius: 14px !important;
        }

        #board-menu {
            z-index: 9999999999999;
        }
        #board-menu-show-btn {
            background-color: rgb(255, 255, 255) !important;
            box-shadow: 0px 8px 12px 0px rgba(0, 0, 0, 0.25) !important;
        }
        /*.card-placeholder {*/
        /*    border: 5px solid red;*/
        /*    height: 1px;*/
        /*}*/
    </style>
    <!--    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">

    <!-- Fonts -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.0/css/all.css" integrity="sha384-lZN37f5QGtY3VHgisS14W3ExzMWZxybE1SJSEsQp9S+oqd12jhcu+A56Ebc1zFSJ" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Nunito&display=swap" rel="stylesheet">

    <!-- jQuery library -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js" integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"></script>
    <script src="js/jquery.ui.sortable-animation.js"></script>

    <!-- Popper JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>

    <!-- Latest compiled JavaScript -->
<!--    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>-->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js" integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf" crossorigin="anonymous"></script>

    <!-- Utility Libraries -->
    <script src="js/utilities.js"></script>

    <script>
        let ENV = "<%=env%>"
        let host = "<%=api.host%>";
        let categoriesPath = "<%=api.categoriesPath%>";
        let sectionsPath = "<%=api.sectionsPath%>";
        let listsPath = "<%=api.listsPath%>";
        let cardsPath = "<%=api.cardsPath%>";
        let containersPath = "<%-api.containersPath%>";

        let context = [];
        let totalResources = 0;
        let builtResources = 0;

        let sectionNameHeightSet = false;

        let menuOpen = false;

        let modalResource; // the current resource being modified by modal
        let $modalResourceDOM; // the current resource DOM being modified by modal
        let modalParentContainerID; // the ID of the current parent container chosen
        let modalParentCategoryID;
        let modalParentSectionID;
        let modalOrderCategoryState = {
            label: "",
            max: -1
        };
        let modalSaveCallback = function(){}; // the callback function to be called by the modal save button
        let modalDeleteCallback = function(){}; // the callback function to be called by the modal delete button
        let modalParentChosenCallback = function() { // the callback function to be called when parent has been chosen from select
            modalParentContainerID = Modal.parent_menu.find("option:selected").val();
            let parentRes = getResourceRecursively(context, modalParentContainerID);
            Modal.order_input.attr({
                "min": 0,
                "max": parentRes.children.length
            });
        };
        let modalParentCategoryChosenCallback = function() {
            let category = getResourceRecursively(context, Modal.parent_category_sel.find("option:selected").val());
            if (modalResource.resourceType === "section") {
                let containers = getResourcesRecursively(category.children, "container");
                if (containers.length > 0) {
                    let sel_html = "<option value='none' selected>(Just in current category)</option>";
                    for (let i = 0; i < containers.length; i++) {
                        let parent = containers[i];
                        let first_section = parent.children[0];
                        sel_html += "<option value=" + parent._id + ">" + first_section.name + "</option>";
                    }
                    Modal.parent_container_sel.html(sel_html);
                    Modal.parent_container.show();
                } else {
                    Modal.parent_container.hide();
                }
            } else { // list
                Modal.parent_container.hide();
                let sections = getResourcesRecursively(category.children, "section");
                console.log(sections.length);
                if (sections.length > 0) {
                    let sel_html = "<option value='none' selected>(Just in current category)</option>";
                    for (let i = 0; i < sections.length; i++) {
                        let parent = sections[i];
                        sel_html += "<option value=" + parent._id + ">" + parent.name + "</option>";
                    }
                    Modal.parent_section_sel.html(sel_html);
                    Modal.parent_section.show();
                } else {
                    Modal.parent_section.hide();
                }
            }
            modalOrderCategoryState = {
                label: "Horizontal Position: (0 is first)",
                max: category.children.length
            }
            Modal.order_label.html(modalOrderCategoryState.label);
            Modal.order_input.attr({
                "min": 0,
                "max": modalOrderCategoryState.max
            });
            Modal.order_input.val(0);
            Modal.order_div.show();
        };
        let modalParentContainerChosenCallback = function() {
            let container = getResourceRecursively(context, Modal.parent_container_sel.find("option:selected").val());
            if (container) {
                Modal.order_label.html("Vertical Position: (0 is first)");
                Modal.order_input.attr({
                    "min": 0,
                    "max": container.children.length
                });
            } else {
                Modal.order_label.html(modalOrderCategoryState.label);
                Modal.order_input.attr({
                    "min": 0,
                    "max": modalOrderCategoryState.max
                });
            }
            Modal.order_input.val(0);
            Modal.order_div.show();
        };
        let modalParentSectionChosenCallback = function() {
            let section = getResourceRecursively(context, Modal.parent_section_sel.find("option:selected").val());
            if (section) {
                Modal.order_label.html("Horizontal Position: (0 is first)");
                Modal.order_input.attr({
                    "min": 0,
                    "max": section.children.length
                });
            } else {
                Modal.order_label.html(modalOrderCategoryState.label);
                Modal.order_input.attr({
                    "min": 0,
                    "max": modalOrderCategoryState.max
                });
            }
            Modal.order_input.val(0);
            Modal.order_div.show();
        };

        let OBJECTS;

        let CardPostJson = function(name, description, listId, order) {
            return {
                "name": name,
                "description": description,
                "listId": listId,
                "order": order,
                "resourceType": "card"
            }
        }

        let CategoryPostJson = function(name, description, order) {
            return {
                "name": name,
                "description": description,
                "order": order,
                "orientation": "x",
                "parentId": "board",
                "resourceType": "category"
            }
        }

        let SectionPostJson = function(name, description, order) {
            return {
                "name": name,
                "description": description,
                "order": order,
                "orientation": "x",
                "parentId": "",
                "resourceType": "section"
            }
        }

        let ListPostJson = function(name, description, order) {
            return {
                "name": name,
                "description": description,
                "order": order,
                "parentId": "",
                "resourceType": "list"
            }
        }

        let Modal = {
            modal: $("#board-modal"),
            title: $("#board-modal").find("#board-modal-title"),
            order_div: $("#board-modal").find("#board-modal-order"),
            order_label: $("#board-modal-order-label"),
            order_input: $("#board-modal").find("#board-modal-order-input"),
            name_input: $("#board-modal").find("#board-modal-name-input"),
            desc_div: $("#board-modal").find("#board-modal-description"),
            desc_input: $("#board-modal").find("#board-modal-description-input"),
            image_div: $("#board-modal").find("#board-modal-image"),
            image_input: $("#board-modal").find("#board-modal-image-input"),
            parent_div: $("#board-modal").find("#board-modal-parent"),
            parent_menu: $("#board-modal").find("#board-modal-parent-menu"),
            parent_category: $("#board-modal").find("#board-modal-parent-category"),
            parent_category_sel: $("#board-modal").find("#board-modal-parent-category-select"),
            parent_container: $("#board-modal").find("#board-modal-parent-container"),
            parent_container_sel: $("#board-modal").find("#board-modal-parent-container-select"),
            parent_section: $("#board-modal").find("#board-modal-parent-section"),
            parent_section_sel: $("#board-modal").find("#board-modal-parent-section-select"),
            save_btn: $("#board-modal-save-btn"),
            delete_btn: $("#board-modal").find("#board-modal-delete-btn")
        }

        let UTILITIES;

        let sortFunc = function(a,b) {
            if (a.order < b.order) return -1;
            else if (a.order > b.order) return 1;
            else return 0;
        }

        let updateResourceOrdersInArr = function(resourceArr) {
            resourceArr.sort(sortFunc);
            let lastOrder = -1;
            for (let i = 0; i < resourceArr.length; i++) {
                let res = resourceArr[i];
                if (lastOrder === res.order) { // resource has been added, increment
                    res.order = res.order + 1;
                } else if (res.order - lastOrder > 1) { // resource has been deleted, decrement
                    res.order = res.order - 1;
                }
                lastOrder = res.order;
            }
            resourceArr.sort(sortFunc);
        }

        let rearrangeChildrenResourcesBasedOnDOM = function($childrenDom) { // a function inside resource object
            if (!this.hasOwnProperty("_id")) return; // for invalid calls to this
            let newChildren = [];
            for (let i = 0; i < $childrenDom.length; i++) {
                let $childDom = $($childrenDom[i]);
                if (typeof $childDom.attr("id") !== typeof undefined && $childDom.attr("id") !== false) {
                    // child dom has id attribute
                    let childRes = getResourceRecursively(context, $childDom.attr("id").split("-")[0]);
                    if (this.resourceType === "container") {
                        childRes.parentId = this._id;
                    } else { // list
                        childRes.listId = this._id;
                    }
                    newChildren.push(childRes);
                }
            }
            newChildren.sort(sortFunc);
            this.children = newChildren;
        }

        let getResourcesRecursively = function(array, resourceType, resourceArr = []) {
            for (let i = 0; i < array.length; i++) {
                let res = array[i];
                res.index = i;
                if (res.resourceType === resourceType) {
                    resourceArr.push(res);
                }
                if (res.hasOwnProperty("children")) {
                    getResourcesRecursively(res.children, resourceType, resourceArr);
                }
            }
            return resourceArr;
        }

        /**
         * Returns an array of available parent containers for the specified resource type
         */
        let getAvailableParentContainers = function(resourceType, container_tree = "Board", array = context, output_arr = []) {
            if (resourceType === "section") {
                for (let i = 0; i < array.length; i++) {
                    let resource = array[i];
                    let tree = container_tree;
                    if (resource.resourceType === "category") {
                        tree += " -> " + resource.name;
                        output_arr.push({
                            container_tree: tree,
                            container_id: resource._id
                        });
                    } else if (resource.resourceType === "container") {
                        tree += " -> column " + (resource.order+1);
                        output_arr.push({
                            container_tree: tree,
                            container_id: resource._id
                        });
                    }
                    if (resource.hasOwnProperty("children")) {
                        getAvailableParentContainers(resourceType, tree, resource.children, output_arr);
                    }
                }
            } else { // list
                if (output_arr.length <= 0) {
                    output_arr.push({
                        container_tree: container_tree,
                        container_id: "board"
                    });
                }
                for (let i = 0; i < array.length; i++) {
                    let resource = array[i];
                    let tree = container_tree;
                    if (resource.hasOwnProperty("name") && resource.name !== "" && resource.name !== undefined) {
                        tree =  container_tree + " -> " + resource.name;
                    }
                    if (resource.resourceType === "category" || resource.resourceType === "section") {
                        output_arr.push({
                            container_tree: tree,
                            container_id: resource._id
                        });
                    }
                    if (resource.hasOwnProperty("children")) {
                        getAvailableParentContainers(resourceType, tree, resource.children, output_arr);
                    }
                }
            }
            return output_arr;
        }

        let CALLBACKS;

        let API;

        function apiUpdateResources(resourceArr = context) {
            if (ENV === "production" || ENV === "testing") {
                for (let i = 0; i < resourceArr.length; i++) {
                    let res = resourceArr[i];
                    let url = host;
                    if (res.resourceType === "category" || res.resourceType === "section") {
                        url = url + containersPath;
                    } else if (res.resourceType === "list") {
                        url = url + listsPath;
                    } else { // card
                        url = url + cardsPath;
                    }
                    url = url + "/" + res._id;
                    if (res.hasOwnProperty("children")) {
                        apiUpdateResources(res.children);
                    }
                    $.ajax({
                        url: url,
                        type: "PUT",
                        data: res
                    });
                }
            }
        }

        function apiPutResource(url, data, successFunc) {
            if (ENV === "production" || ENV === "testing") {
                return $.ajax({
                    url: url,
                    type: "PUT",
                    data: data,
                    success: successFunc
                });
            } else {
                if (!data._id) {
                    data._id = create_UUID();
                }
                successFunc(data);
            }
        }

        function apiPostResource(url, data, successFunc) {
            if (ENV === "production" || ENV === "testing") {
                return $.ajax({
                    url: url,
                    type: "POST",
                    data: data,
                    success: successFunc
                });
            } else {
                data._id = create_UUID();
                successFunc(data);
            }
        }

        function apiDeleteResource(url, successFunc) {
            if (ENV === "production" || ENV === "testing") {
                return $.ajax({
                    url: url,
                    type: "DELETE",
                    success: successFunc
                });
            } else {
                successFunc("test data");
            }
        }

        let RESOURCE_MANAGEMENT;

        function buildResourceObj(baseObj, resourceType) {
            baseObj.resourceType = resourceType;
            baseObj.updateChildren = rearrangeChildrenResourcesBasedOnDOM;
            if (resourceType !== "card") {
                baseObj.children = [];
            }
            return baseObj;
        }

        function buildNewContainerResource(parentId, order) {
            return {
                "orientation": "y",
                "parentId": parentId,
                "order": order
            }
        }

        function buildListResource(list) {
            totalResources++;
            list.children = [];
            // get children cards
            $.get(host + cardsPath + "?listId=" + list._id, function(data) {
                for (let i = 0; i < data.length; i++) {
                    data[i].resourceType = "card";
                    list.children.push(data[i]);
                }
                buildDOM();
            });
            return list;
        }

        function buildContainerResource(container) {
            let builtChildren = 0;
            totalResources++;
            container.children = [];
            // get child containers
            $.get(host + containersPath + "?parentId=" + container._id, function(data) {
                for (let i = 0; i < data.length; i++) {
                    let child = data[i];
                    if (!child.hasOwnProperty("name") || !child.name || child.orientation === "y") {
                        buildResourceObj(child, "container");
                    } else {
                        buildResourceObj(child, "section")
                    }
                    buildContainerResource(child);
                    container.children.push(child);
                }
                if (builtChildren) buildDOM();
                else builtChildren++;
            });
            // get child lists
            $.get(host + listsPath + "?parentId=" + container._id, function(data) {
                for (let i = 0; i < data.length; i++) {
                    let child = data[i];
                    buildResourceObj(child, "list");
                    buildListResource(child);
                    container.children.push(child);
                }
                if (builtChildren) buildDOM();
                else builtChildren++;
            });
        }

        function addResourceToArray(resourceArr, resource) {
            resourceArr.splice(resource.order, 0, resource);
            updateResourceOrdersInArr(resourceArr);
            buildDOM(true);
            setupJquery();
            apiUpdateResources();
        }

        function moveResourceInArray(resourceArr, resource) {
            for (let i = 0; i < resourceArr.length; i++) {
                let res = resourceArr[i];
                if (res._id === resource._id) {
                    resourceArr.splice(i, 1);
                    break;
                }
            }
            resourceArr.splice(resource.order, 0, resource);
            updateResourceOrdersInArr(resourceArr);
            deleteEmptyContainersRecursively();
            buildDOM(true);
            setupJquery();
            apiUpdateResources();
        }

        function moveResourceBetweenParents(srcParentId, destParentId, resourceId) {
            let src = getResourceRecursively(context, srcParentId);
            let dest = getResourceRecursively(context, destParentId);
            let resource = getResourceRecursively(context, resourceId);
            for (let i = 0; i < src.children.length; i++) {
                let res = src.children[i];
                if (res._id === resource._id) {
                    src.children.splice(i, 1);
                    updateResourceOrdersInArr(src.children);
                    break;
                }
            }
            dest.children.splice(resource.order, 0, resource);
            updateResourceOrdersInArr(dest.children);
            deleteEmptyContainersRecursively();
            buildDOM(true);
            setupJquery();
            apiUpdateResources();
        }

        function getResourceRecursively(resourceArr, resourceId) {
            if (resourceId === "board") {
                return {
                    children: context
                }
            }
            for (let i = 0; i < resourceArr.length; i++) {
                if (resourceArr[i]._id === resourceId) return resourceArr[i];
                else if (resourceArr[i].hasOwnProperty("children")) {
                    let resource = getResourceRecursively(resourceArr[i].children, resourceId);
                    if (resource !== null) return resource;
                }
            }
            return null;
        }

        function deleteResourceRecursively(resourceArr, resourceId = null) {
            if (resourceId === null) { // delete everything in array
                for (let i = 0; i < resourceArr.length; i++) {
                    let resourcePath;
                    if (resourceArr[i].hasOwnProperty("children")) {
                        deleteResourceRecursively(resourceArr[i].children);
                    }
                    if (resourceArr[i].resourceType === "card") {
                        resourcePath = cardsPath;
                    } else if (resourceArr[i].resourceType === "list") {
                        resourcePath = listsPath;
                    } else {
                        resourcePath = containersPath;
                    }
                    apiDeleteResource(host + resourcePath + "/" + modalResource._id, function(data){});
                }
                deleteEmptyContainersRecursively();
                buildDOM(true);
                setupJquery();
                apiUpdateResources();
            } else {
                for (let i = 0; i < resourceArr.length; i++) {
                    if (resourceArr[i]._id === resourceId) {
                        let resourcePath;
                        if (resourceArr[i].resourceType === "card") {
                            resourcePath = cardsPath;
                        } else if (resourceArr[i].resourceType === "list") {
                            resourcePath = listsPath;
                        } else {
                            resourcePath = containersPath;
                        }
                        resourceArr.splice(i, 1);
                        deleteEmptyContainersRecursively();
                        updateResourceOrdersInArr(resourceArr);
                        buildDOM(true);
                        setupJquery();
                        apiDeleteResource(host + resourcePath + "/" + modalResource._id, function(data){});
                        apiUpdateResources();
                        return;
                    }
                    else if (resourceArr[i].hasOwnProperty("children")) {
                        deleteResourceRecursively(resourceArr[i].children, resourceId);
                    }
                }
            }
        }

        function deleteEmptyContainersRecursively(resourceArr = context) {
            for (let i = 0; i < resourceArr.length; i++) {
                let res = resourceArr[i];
                if (res.resourceType === "container" && res.children.length === 0) {
                    resourceArr.splice(i, 1);
                    updateResourceOrdersInArr(resourceArr);
                    buildDOM(true);
                    setupJquery();
                    apiDeleteResource(host + containersPath + "/" + modalResource._id, function(data){});
                    apiUpdateResources();
                } else if (res.hasOwnProperty("children")) {
                    deleteEmptyContainersRecursively(res.children);
                }
            }
        }

        let DOM_MANAGEMENT;

        /**
          * A one-time-call function after all the resources are retrieved at init
          */
        function buildDOM(buildNow) {
            builtResources++;
            if (builtResources === totalResources || buildNow) {
                console.debug("building DOM");
                let $board_content = $("#board-content");
                let $last;
                $board_content.html("");
                context.sort(sortFunc);
                for (let i = 0; i < context.length; i++) {
                    $last = buildResourceDOM(context[i], $board_content, "x", 0);
                }
            }
            setupJquery();
        }

        function buildResourceDOM(resource, $layout, layout_orientation, layout_layer) {
            let $dom = $("<div></div>");

            if (resource.resourceType === "category") {
                let category = resource;
                let $name = $("<div></div>");
                let $content = $("<div></div>");
                let $last;
                // DOM setup
                $dom.attr({
                    "id": category._id,
                    "class": "board-category me-5"
                });
                $name.attr({
                    "id": category._id + "-" + "name",
                    "class": "board-category-name ui-state-disabled"
                });
                $content.attr({
                    "id": category._id + "-" + "content",
                    "class": "layout d-inline-flex ui-state-disabled board-category-sortable"
                });
                // build children
                for (let i = 0; i < category.children.length; i++) {
                    let res = category.children[i];
                    $last = buildResourceDOM(res, $content,  category.orientation, layout_layer + 1);
                }

                if (category.children.length === 0) {
                    // add filler to preserve size
                    // let $filler = $("<div></div>");
                    // $filler.attr("class", "card-filler ui-state-disabled");
                    // $content.append($filler);
                } else {
                    // remove margin of last child
                    // let margin_class = $last.attr("class").split(" ").pop();
                    // $last.removeClass(margin_class);
                }
                $name.html(category.name.toUpperCase());
                $dom.append($name);
                $dom.append("<hr class='board-category-title-hr mb-4'/>")
                $dom.append($content);
            } else if (resource.resourceType === "section") {
                let section = resource;
                let $name = $("<div></div>");
                let $content = $("<div></div>");
                let $last;
                // DOM setup
                $dom.attr({
                    "id": section._id,
                    "class": "board-section mb-4"
                });
                $name.attr({
                    "id": section._id + "-" + "name",
                    "class": "board-section-name ui-state-disabled"
                });
                if (section.children.length > 0) {
                    $name.css({
                        "padding-bottom": "37px",
                        "margin-bottom": "-35px"
                    });
                } else {
                    $name.css({
                        "padding-bottom": "2px",
                        "margin-bottom": "0px"
                    });
                }
                $content.attr({
                    "id": section._id + "-" + "content",
                    // "class": "layout d-table board-section-sortable"
                    "class": "layout d-inline-flex board-section-sortable"
                });
                // build children
                for (let i = 0; i < section.children.length; i++) {
                    let res = section.children[i];
                    $last = buildResourceDOM(res, $content,  section.orientation, layout_layer + 1);
                }
                $name.html(section.name.toUpperCase());
                $dom.append($name);
                $dom.append($content);
            } else if (resource.resourceType === "container") {
                let container = resource;
                // DOM setup
                $dom.attr({
                    "id": container._id,
                    // "class": "board-container bg-transparent d-inline-flex flex-column layout ui-state-disabled board-container-sortable me-4"
                    "class": "board-container bg-transparent d-table-row layout ui-state-disabled board-container-sortable me-4"
                });
                // build children
                for (let i = 0; i < container.children.length; i++) {
                    let res = container.children[i];
                    buildResourceDOM(res, $dom,  container.orientation, layout_layer + 1);
                }
            } else if (resource.resourceType === "list") {
                let list = resource;
                let $name = $("<div></div>");
                let $content = $("<div></div>");
                let $background = $("<div></div>")
                // let $dom_class = "board-list d-inline-flex flex-column";
                let $dom_class = "board-list d-table";
                let $last;
                if (list.parentId === "board") {
                    $dom_class += " me-5";
                } else {
                    $dom_class += " me-3";
                }
                $dom.attr({
                    "id": list._id,
                    "class": $dom_class
                });
                $name.attr({
                    "id": list._id + "-" + "name",
                    "class": "board-list-name ui-state-disabled"
                });
                $content.attr({
                    "id": list._id + "-" + "content",
                    "class": "board-list-content p-3 d-table ui-state-disabled board-list-sortable",
                    // "class": "p-3 d-inline-flex flex-column ui-state-disabled board-list-sortable"
                });
                $background.attr({
                    "class": "board-list-background"
                });
                // add add_btn
                let $filler = $("<div class='card-filler'></div>");
                let $add_btn_container = $("<div></div>");
                let $add_btn = $("<button></button>")
                $add_btn.attr({
                    "id": list._id + "-add-btn",
                    "type": "button",
                    "class": "board-list-add-btn btn"
                });
                // $add_btn.html("<i class='fas fa-plus'></i>");
                $add_btn.html("<img src='icons/plus.png' style='width:16px; height:16px'/>");
                $add_btn_container.attr("class", "board-list-add-btn-div ui-state-disabled");
                $add_btn_container.html($add_btn);
                $content.append($filler);
                $content.append($add_btn_container);
                // build children
                for (let i = 0; i < list.children.length; i++) {
                    let res = list.children[i];
                    $last = buildResourceDOM(res, $content,  "y", layout_layer + 1);
                }
                $background.append($content);
                $name.html(list.name);
                $dom.append($name);
                $dom.append($content);
            } else if (resource.resourceType === "card") {
                let card = resource;
                let $img = $("<img class='card-img-top ui-state-disabled'/>");
                let $body = $("<div></div>");
                let $footer = $("<div></div>");
                $dom.attr({
                    "id": card._id,
                    "class": "board-card card main p-2 mb-3"
                });
                $body.attr({
                    "class": "card-body ui-state-disabled"
                });
                $footer.attr({
                    "class": "card-footer ui-state-disabled"
                });
                if (card.hasOwnProperty("image") && card.image !== "") {
                    let reader = new FileReader();
                    reader.onload = function (e) {
                        $img.attr({
                            "src": e.target.result
                        });
                    }
                    reader.readAsDataURL(card.image);
                }
                $body.html(card.name);
                if (card.hasOwnProperty("description") && card.description.length > 0) {
                    // $footer.html("<i class='fas fa-align-left'></i>");
                    // $body.append("<div class='ui-state-disabled' style='width:100%;height:8px;'></div><i class='fas fa-align-left'></i>");
                    $body.append("<div class='ui-state-disabled' style='width:100%;height:4px;'></div>" +
                        "<img class='ui-state-disabled' src='icons/description.svg' style='width:16px'/>");
                }
                $dom.append($img);
                $dom.append($body);
                $layout.find(".board-list-add-btn-div").before($dom);
                return $dom;
            }

            $layout.append($dom);
            return $dom;
        }

        function buildCategorySelectorHTML(isList = false) {
            let categories = getResourcesRecursively(context, "category");
            let category_sel_html
            if (isList) {
                category_sel_html = "<option value='board' selected>(Just on board)</option>";
            } else {
                category_sel_html = "<option value='none' selected>Choose</option>";
            }
            for (let i = 0; i < categories.length; i++) {
                let parent = categories[i];
                category_sel_html += "<option value=" + parent._id + ">" + parent.name + "</option>";
            }
            return category_sel_html;
        }

        function setupJquery() {

            // "add" modal configurations

            $(".board-list-add-btn").click(function() {
                let listResource = getResourceRecursively(context, $(this).attr("id").split("-")[0]);
                modalResource = CardPostJson("noname", "nodesc", listResource._id, listResource.children.length);
                modalSaveCallback = function() { // modal callback
                    console.log("adding new card");
                    let $listContent = $("#" + listResource._id + "-content");
                    let image_input = document.getElementById("board-modal-image-input");
                    modalResource.name = Modal.name_input.val();
                    modalResource.description = Modal.desc_input.val();
                    if (image_input.files && image_input.files[0]) {
                        modalResource.image = image_input.files[0];
                        // let reader = new FileReader();
                        // reader.onload = function (e) {
                        //     $modalResourceDOM.find(".card-img-top").attr('src', e.target.result);
                        // }
                        // reader.readAsDataURL(image_input.files[0]);
                    }
                    apiPostResource(host + cardsPath, modalResource, function(data) { // callback after post success
                        data.resourceType = "card";
                        buildResourceDOM(data,  $listContent);
                        addResourceToArray(getResourceRecursively(context, listResource._id).children, data);
                        setupJquery();
                        console.log("new card added");
                    });
                    Modal.modal.modal("hide");
                }
                Modal.parent_div.hide();
                Modal.image_input.val("");
                Modal.image_div.show();
                Modal.order_div.hide();
                Modal.delete_btn.hide();
                Modal.title.html("Add a Card");
                Modal.name_input.val("");
                Modal.desc_input.val("");
                Modal.name_input.show();
                Modal.desc_div.show();
                Modal.modal.modal("show");
            })

            // "edit" modal configurations

            $(".board-category-name").click(function() {
                modalResource = getResourceRecursively(context, $(this).attr("id").split("-")[0]);
                $modalResourceDOM = $(this).parent();
                modalSaveCallback = function() {
                    modalResource.name = Modal.name_input.val();
                    modalResource.description = Modal.desc_input.val();
                    modalResource.order = parseInt(Modal.order_input.val());
                    apiPutResource(host + containersPath + "/" + modalResource._id, modalResource, function(data) {
                        moveResourceInArray(context, modalResource);
                        console.log("category edited");
                    });
                    Modal.modal.modal("hide");
                }
                modalDeleteCallback = function() {
                    $modalResourceDOM.remove();
                    deleteResourceRecursively(context, modalResource._id);
                    buildDOM(true);
                    Modal.modal.modal("hide");
                }
                Modal.parent_div.hide();
                Modal.image_div.hide();
                Modal.delete_btn.show();
                Modal.title.html("Edit Category");
                Modal.name_input.val(modalResource.name);
                Modal.name_input.show();
                Modal.desc_input.val(modalResource.description);
                Modal.desc_div.show();
                Modal.order_label.html("Horizontal Position: (0 is first)");
                Modal.order_input.val(modalResource.order);
                Modal.order_div.show();
                Modal.modal.modal("show");
            });
            $(".board-section-name").click(function() {
                modalResource = getResourceRecursively(context, $(this).attr("id").split("-")[0]);
                $modalResourceDOM = $(this).parent();
                modalSaveCallback = function() {
                    let currentParentId = modalResource.parentId;
                    let newParentId = "none";
                    let parentRes;
                    let order = parseInt(Modal.order_input.val());
                    if (Modal.parent_container.is(":visible") && Modal.parent_container_sel.find("option:selected").val() !== "none") {
                        newParentId = Modal.parent_container_sel.find("option:selected").val();
                    } else if (Modal.parent_category_sel.find("option:selected").val() !== "none") {
                        newParentId = Modal.parent_category_sel.find("option:selected").val();
                    }
                    parentRes = getResourceRecursively(context, newParentId);
                    modalResource.name = Modal.name_input.val();
                    modalResource.description = Modal.desc_input.val();
                    modalResource.parentId = newParentId;
                    modalResource.order = order;
                    if (newParentId !== "none") {
                        if (parentRes.resourceType === "category") {
                            // add container first
                            let containerRes = buildResourceObj(buildNewContainerResource(newParentId, order), "container");
                            modalResource.order = 0;
                            apiPostResource(host + containersPath, containerRes, function(containerData) {
                                addResourceToArray(parentRes.children, containerData);
                                console.log("new container added");
                                // move section to container
                                apiPutResource(host + containersPath + "/" + modalResource._id, modalResource, function(sectionData) {
                                    moveResourceBetweenParents(currentParentId, containerRes._id, modalResource._id);
                                });
                            });
                        } else {
                            // move section to existing container
                            apiPutResource(host + containersPath + "/" + modalResource._id, modalResource, function() {
                                moveResourceBetweenParents(modalResource.parentId, newParentId, modalResource._id);
                            });
                        }
                    } else {
                        apiPutResource(host + containersPath + "/" + modalResource._id, modalResource, function() {
                            buildDOM(true);
                        });
                    }
                    console.log("section edited");
                    Modal.modal.modal("hide");
                }
                modalDeleteCallback = function() {
                    $modalResourceDOM.remove();
                    deleteResourceRecursively(context, modalResource._id);
                    buildDOM(true);
                    deleteEmptyContainersRecursively();
                    Modal.modal.modal("hide");
                }
                let category_sel_html = buildCategorySelectorHTML();
                Modal.parent_div.show();
                Modal.parent_category_sel.html(category_sel_html);
                Modal.parent_category.show();
                Modal.parent_container.hide();
                Modal.parent_section.hide();
                Modal.order_div.hide();
                Modal.delete_btn.show();
                Modal.title.html("Edit Section");
                Modal.name_input.val(modalResource.name);
                Modal.name_input.show();
                Modal.desc_input.val(modalResource.description);
                Modal.desc_div.show();
                Modal.image_div.hide();
                Modal.modal.modal("show");
            });
            $(".board-list-name").click(function() {
                modalResource = getResourceRecursively(context, $(this).attr("id").split("-")[0]);
                $modalResourceDOM = $(this).parent();
                modalSaveCallback = function() {
                    let currentParentId = modalResource.parentId;
                    let newParentId = "none";
                    let order = parseInt(Modal.order_input.val());
                    if (Modal.parent_section.is(":visible") && Modal.parent_section_sel.find("option:selected").val() !== "none") {
                        newParentId = Modal.parent_section_sel.find("option:selected").val();
                    } else if (Modal.parent_category_sel.find("option:selected").val() !== "none") {
                        newParentId = Modal.parent_category_sel.find("option:selected").val();
                    }
                    modalResource.name = Modal.name_input.val();
                    modalResource.description = Modal.desc_input.val();
                    modalResource.parentId = newParentId;
                    modalResource.order = order;
                    apiPutResource(host + listsPath + "/" + modalResource._id, modalResource, function(listData) {
                        moveResourceBetweenParents(currentParentId, newParentId, modalResource._id);
                    });
                    Modal.modal.modal("hide");
                }
                modalDeleteCallback = function() {
                    $modalResourceDOM.remove();
                    deleteResourceRecursively(context, modalResource._id);
                    buildDOM(true);
                    Modal.modal.modal("hide");
                }

                Modal.parent_div.show();
                Modal.image_div.hide();
                Modal.parent_category_sel.html(buildCategorySelectorHTML(true));
                Modal.parent_category.show();
                Modal.parent_container.hide();
                Modal.parent_section.hide();
                Modal.delete_btn.show();
                Modal.title.html("Edit List");
                Modal.name_input.val(modalResource.name);
                Modal.name_input.show();
                Modal.desc_input.val(modalResource.description);
                Modal.desc_div.show();
                Modal.order_label.html("Horizontal Position: (0 is first)");
                Modal.order_input.attr({
                    "min": 0,
                    "max": context.length
                })
                Modal.order_input.val(0);
                Modal.order_div.show();
                Modal.modal.modal("show");
            });
            $(".board-card").click(function() {
                console.log("card clicked");
                modalResource = getResourceRecursively(context, $(this).attr("id").split("-")[0]);
                $modalResourceDOM = $(this);
                modalSaveCallback = function() {
                    let image_input = document.getElementById("board-modal-image-input")
                    modalResource.name = Modal.name_input.val();
                    modalResource.description = Modal.desc_input.val();
                    if (image_input.files && image_input.files[0]) {
                        modalResource.image = image_input.files[0];
                        let reader = new FileReader();
                        reader.onload = function (e) {
                            $modalResourceDOM.find(".card-img-top").attr('src', e.target.result);
                        }
                        reader.readAsDataURL(image_input.files[0]);
                    }
                    $modalResourceDOM.find(".card-body").html(modalResource.name);
                    apiPutResource(host + cardsPath + "/" + modalResource._id, modalResource, function(){});
                    buildDOM(true);
                    Modal.modal.modal("hide");
                }
                modalDeleteCallback = function() {
                    $modalResourceDOM.remove();
                    deleteResourceRecursively(context, modalResource._id);
                    Modal.modal.modal("hide");
                }
                Modal.parent_div.hide();
                Modal.image_input.val("");
                Modal.image_div.show();
                Modal.order_div.hide();
                Modal.delete_btn.show();
                Modal.title.html("Edit Card");
                Modal.name_input.val(modalResource.name);
                Modal.desc_input.val(modalResource.description);
                Modal.name_input.show();
                Modal.desc_div.show();
                Modal.modal.modal("show");
            });

            // sortables

            $(".board-list-sortable").sortable({
                items: "div:not(.ui-state-disabled, .board-category, .board-container, .board-section, .board-list)",
                connectWith: ".board-list-sortable",
                placeholder: "card-placeholder mb-3",
                forcePlaceholderSize: true,
                // zIndex: 1,
                // start: function(event, ui) {
                //     $(".board-card").css("z-index", 1000);
                //     $(".board-list").css("z-index", 1);
                //     console.debug($(".board-card").css("z-index") + " - " + $(".board-list-content").css("z-index"))
                // },
                receive: function(event, ui) {
                    let resource = getResourceRecursively(context, $(this).attr("id").split("-")[0]);
                    resource.updateChildren($(this).children());
                    apiUpdateResources();
                },
                stop: function(event, ui) {
                    let resource = getResourceRecursively(context, $(this).attr("id").split("-")[0]);
                    resource.updateChildren($(this).children());
                    apiUpdateResources();
                }
            }).disableSelection();
        }

        function refreshModal() {
            Modal = {
                modal: $("#board-modal"),
                title: $("#board-modal").find("#board-modal-title"),
                order_div: $("#board-modal").find("#board-modal-order"),
                order_label: $("#board-modal-order-label"),
                order_input: $("#board-modal").find("#board-modal-order-input"),
                name_input: $("#board-modal").find("#board-modal-name-input"),
                desc_div: $("#board-modal").find("#board-modal-description"),
                desc_input: $("#board-modal").find("#board-modal-description-input"),
                image_div: $("#board-modal").find("#board-modal-image"),
                image_input: $("#board-modal").find("#board-modal-image-input"),
                parent_div: $("#board-modal").find("#board-modal-parent"),
                parent_menu: $("#board-modal").find("#board-modal-parent-menu"),
                parent_category: $("#board-modal").find("#board-modal-parent-category"),
                parent_category_sel: $("#board-modal").find("#board-modal-parent-category-select"),
                parent_container: $("#board-modal").find("#board-modal-parent-container"),
                parent_container_sel: $("#board-modal").find("#board-modal-parent-container-select"),
                parent_section: $("#board-modal").find("#board-modal-parent-section"),
                parent_section_sel: $("#board-modal").find("#board-modal-parent-section-select"),
                save_btn: $("#board-modal-save-btn"),
                delete_btn: $("#board-modal").find("#board-modal-delete-btn")
            }
        }

        let INIT;

        $(function() {

            // initializations

            refreshModal();

            $("#board-menu-items").hide();
            $("#board-modal-save-btn").click(function() {
                modalSaveCallback();
            });
            $("#board-modal-delete-btn").click(function() {
                modalDeleteCallback();
            });
            $("#board-modal-parent-menu").on("change", function() {
                modalParentChosenCallback();
            });
            $("#board-modal-parent-category-select").on("change", function() {
                modalParentCategoryChosenCallback();
            });
            $("#board-modal-parent-container-select").on("change", function() {
                modalParentContainerChosenCallback()
            });
            $("#board-modal-parent-section-select").on("change", function() {
                modalParentSectionChosenCallback();
            });
            $("#board-menu-show-btn").click(function() {
                let d = 45;
                if (menuOpen) {
                    $("#board-menu-items").hide();
                    $({deg: 45}).animate({deg: 0}, {
                        duration: 300,
                        step: function(now) {
                            $("#board-menu-show-btn").css({
                                transform: 'rotate(' + now + 'deg)'
                            });
                        }
                    });
                } else {
                    $("#board-menu-items").show();
                    $({deg: 0}).animate({deg: 45}, {
                        duration: 300,
                        step: function(now) {
                            $("#board-menu-show-btn").css({
                                transform: 'rotate(' + now + 'deg)'
                            });
                        }
                    });
                }
                menuOpen = !menuOpen;
            });
            $("#board-menu-change-bg").click(function() {
                modalSaveCallback = function() {
                    let image_input = document.getElementById("board-modal-image-input");
                    if (image_input.files && image_input.files[0]) {
                        let reader = new FileReader();
                        reader.onload = function (e) {
                            $("html").css({
                                "background": "linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)), url(" + e.target.result + ") no-repeat center center fixed",
                                "-webkit-background-size": "cover",
                                "-moz-background-size": "cover",
                                "-o-background-size": "cover",
                                "background-size": "cover"
                            });
                        }
                        reader.readAsDataURL(image_input.files[0]);
                        Modal.image_input.val("");
                        Modal.modal.modal("hide");
                    }
                    console.log("changing background");
                }
                Modal.parent_div.hide();
                Modal.image_div.show();
                Modal.order_div.hide();
                Modal.delete_btn.hide();
                Modal.title.html("Change Board Background");
                Modal.name_input.hide();
                Modal.desc_div.hide();
                Modal.modal.modal("show");
            });
            $("#board-menu-add-category").click(function() {
                modalResource = CategoryPostJson("noname", "nodesc", 0);
                modalSaveCallback = function() { // modal callback
                    console.log("adding new category");
                    let parentRes = getResourceRecursively(context, "board");
                    let order = parseInt(Modal.order_input.val());
                    if (order > parentRes.children.length + 1) {
                        order = parentRes.children.length + 1;
                    }
                    modalResource.name = Modal.name_input.val();
                    modalResource.description = Modal.desc_input.val();
                    modalResource.order = order;
                    modalResource.parentId = "board";
                    apiPostResource(host + containersPath, modalResource, function(data) { // callback after post success
                        data.resourceType = "category";
                        data.children = [];
                        addResourceToArray(context, data);
                        buildDOM(true);
                        setupJquery();
                        apiUpdateResources();
                        console.log("new category added");
                    });
                    Modal.modal.modal("hide");
                }
                Modal.order_input.attr({
                    "min": 0,
                    "max": context.length
                });
                Modal.parent_div.hide();
                Modal.image_div.hide();
                Modal.order_input.show();
                Modal.order_div.show();
                Modal.delete_btn.hide();
                Modal.title.html("Add a Category");
                Modal.name_input.val("");
                Modal.desc_input.val("");
                Modal.name_input.show();
                Modal.desc_div.show();
                Modal.modal.modal("show");
            });
            $("#board-menu-add-section").click(function() {
                let availableParents = getAvailableParentContainers("section")
                modalResource = SectionPostJson("noname", "nodesc", 0);
                modalSaveCallback = function() { // modal callback
                    console.log("adding new section");
                    let parentId;
                    if (Modal.parent_container.is(":visible") && Modal.parent_container_sel.find("option:selected").val() !== "none") {
                        parentId = Modal.parent_container_sel.find("option:selected").val();
                    } else {
                        parentId = Modal.parent_category_sel.find("option:selected").val();
                    }
                    let parentRes = getResourceRecursively(context, parentId);
                    let order = parseInt(Modal.order_input.val());
                    if (order > parentRes.children.length + 1) {
                        order = parentRes.children.length + 1;
                    }
                    modalResource.name = Modal.name_input.val();
                    modalResource.description = Modal.desc_input.val();
                    modalResource.order = order;
                    modalResource.parentId = parentId;
                    if (parentRes.resourceType === "category") {
                        // add container first
                        let containerRes = buildResourceObj(buildNewContainerResource(parentId, order), "container");
                        modalResource.order = 0;
                        apiPostResource(host + containersPath, containerRes, function(containerData) {
                            console.debug("adding new container");
                            addResourceToArray(parentRes.children, containerData);
                            modalResource.parentId = containerData._id;
                            console.log("new container added");
                            // add section to container
                            apiPostResource(host + containersPath, modalResource, function(sectionData) {
                                console.debug("adding section to container");
                                let sectionRes = buildResourceObj(sectionData, "section");
                                addResourceToArray(containerRes.children, sectionRes);
                                console.log("new section added");
                            });
                        });
                    } else {
                        // add section to existing container
                        apiPostResource(host + containersPath, modalResource, function(sectionData) {
                            let sectionRes = buildResourceObj(sectionData, "section");
                            addResourceToArray(parentRes.children, sectionRes);
                            console.log("new section added");
                        });
                    }
                    Modal.modal.modal("hide");
                }
                let category_sel_html = buildCategorySelectorHTML();
                Modal.parent_div.show();
                Modal.parent_category_sel.html(category_sel_html);
                Modal.parent_category.show();
                Modal.parent_container.hide();
                Modal.parent_section.hide();
                Modal.image_div.hide();
                Modal.order_div.hide();
                Modal.delete_btn.hide();
                Modal.title.html("Add a Section");
                Modal.name_input.val("");
                Modal.desc_input.val("");
                Modal.name_input.show();
                Modal.desc_div.show();
                Modal.modal.modal("show");
            });
            $("#board-menu-add-list").click(function() {
                let availableParents = getAvailableParentContainers("list")
                modalResource = ListPostJson("noname", "nodesc", 0);
                modalSaveCallback = function() { // modal callback
                    console.log("adding new list");
                    let parentId;
                    if (Modal.parent_section.is(":visible") && Modal.parent_section.find("option:selected").val() !== "none") {
                        parentId = Modal.parent_section_sel.find("option:selected").val();
                    } else if (Modal.parent_category_sel.find("option:selected").val() !== "none") {
                        parentId = Modal.parent_category_sel.find("option:selected").val();
                    } else {
                        parentId = "board";
                    }
                    let parentRes = getResourceRecursively(context, parentId);
                    let order = parseInt(Modal.order_input.val());
                    if (order > parentRes.children.length + 1) {
                        order = parentRes.children.length + 1;
                    }
                    modalResource.name = Modal.name_input.val();
                    modalResource.description = Modal.desc_input.val();
                    modalResource.order = order;
                    modalResource.parentId = parentId;
                    apiPostResource(host + containersPath, modalResource, function(data) { // callback after post success
                        data.resourceType = "list";
                        data.children = [];
                        addResourceToArray(parentRes.children, data);
                        console.log("new list added");
                    });
                    Modal.modal.modal("hide");
                }
                // build parent dropdowns
                let parent_dropdown_html = "<option selected>Choose</option>";
                for (let i = 0; i < availableParents.length; i++) {
                    let parent = availableParents[i];
                    parent_dropdown_html += "<option value=" + parent.container_id + ">" + parent.container_tree + "</option>";
                }
                Modal.parent_menu.html(parent_dropdown_html);
                Modal.parent_div.show();
                Modal.parent_category_sel.html(buildCategorySelectorHTML(true));
                Modal.parent_category.show();
                Modal.parent_container.hide();
                Modal.parent_section.hide();
                Modal.image_div.hide();
                Modal.order_input.attr({
                    "min": 0,
                    "max": context.length
                });
                Modal.order_div.show();
                Modal.delete_btn.hide();
                Modal.title.html("Add a List");
                Modal.name_input.val("");
                Modal.desc_input.val("");
                Modal.name_input.show();
                Modal.desc_div.show();
                Modal.modal.modal("show");
            });

            // build context
            $.get(host + containersPath + "?parentId=board", function(data) {
                for (let i = 0; i < data.length; i++) {
                    let container = data[i];
                    buildResourceObj(container, "category");
                    buildContainerResource(container);
                    context.push(container);
                }
            });
            $.get(host + listsPath + "?parentId=board", function(data) {
                for (let i = 0; i < data.length; i++) {
                    let list = data[i];
                    buildResourceObj(list, "list");
                    buildListResource(list);
                    context.push(list);
                }
            });

        });

    </script>
</head>

<!--<body style="background-image: url('<%=api.host%>/img/background.jpg')">-->
<!--    <img src="img/testimg.png" alt="Test"/>-->
<body class="bg-transparent">
<div id="body" class="layout-body container-fluid">

    <div id="gradient"></div>

    <div id="board-menu" class="position-fixed bottom-0 end-0 p-5">
        <div id="board-menu-items" class="mb-4">
            <button id="board-menu-change-bg" type="button" class="btn board-btn-menu board-btn-green float-end">Change Background</button><br/><br/>
            <button id="board-menu-add-category" type="button" class="btn board-btn-menu btn-dark float-end">Add a Category</button><br/><br/>
            <button id="board-menu-add-section" type="button" class="btn board-btn-menu btn-dark float-end">Add a Section</button><br/><br/>
            <button id="board-menu-add-list" type="button" class="btn board-btn-menu btn-dark float-end">Add a List</button><br/><br/>
        </div>
        <br/>
        <button id="board-menu-show-btn" type="button" style="width:64px;height:64px" class="btn rounded-circle float-end">
<!--            <i class="fas fa-plus"></i>-->
            <img src="icons/plus.png" style="width:32px"/>
        </button>
    </div>

<!--    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#board-modal" data-bs-whatever="@mdo">Open modal for @mdo</button>-->

    <!-- MODAL -->
    <div class="modal fade" id="board-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="board-modal-title">NO TITLE</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div id="board-modal-name" class="mb-3">
<!--                            <label for="recipient-name" class="col-form-label">Name:</label>-->
                            <input type="text" class="form-control modal-text-input" id="board-modal-name-input" placeholder="Name">
                        </div>
                        <div id="board-modal-description" class="mb-3">
                            <label for="board-modal-description-input" class="modal-label col-form-label">
<!--                                <i class="fas fa-align-left"></i> -->
                                <img src="icons/description.svg" style="width:16px;"/>
                                <b>Description</b>
                            </label>
                            <textarea class="form-control modal-text-input" id="board-modal-description-input" rows="5"></textarea>
                        </div>
                        <div id="board-modal-image" class="mb-3">
                            <label for="board-modal-image-input" class="modal-label col-form-label">
                                <img src="icons/description.svg" style="width:16px;"/> <b>Set image</b>
                            </label>
                            <input type="file" id="board-modal-image-input" accept="image/*"/>
                        </div>
                        <div id="board-modal-parent" class="mb-3">
                            <label class="modal-label col-form-label"><b>Place under</b></label>
                            <div id="board-modal-parent-category" class="modal-subdiv">
                                <label class="modal-sublabel col-form-label">Category</label>
                                <select id="board-modal-parent-category-select" class="form-select modal-parent-menu" aria-label="Default select example">
                                    <option selected>Choose</option>
                                    <option value="1">One</option>
                                    <option value="2">Two</option>
                                    <option value="3">Three</option>
                                </select>
                            </div>
                            <div id="board-modal-parent-container" class="modal-subdiv">
                                <label class="modal-sublabel col-form-label">In section column</label>
                                <select id="board-modal-parent-container-select" class="form-select modal-parent-menu" aria-label="Default select example">
                                    <option selected>Choose</option>
                                    <option value="1">One</option>
                                    <option value="2">Two</option>
                                    <option value="3">Three</option>
                                </select>
                            </div>
                            <div id="board-modal-parent-section" class="modal-subdiv">
                                <label class="modal-sublabel col-form-label">Section</label>
                                <select id="board-modal-parent-section-select" class="form-select modal-parent-menu" aria-label="Default select example">
                                    <option selected>Choose</option>
                                    <option value="1">One</option>
                                    <option value="2">Two</option>
                                    <option value="3">Three</option>
                                </select>
                            </div>
                        </div>
                        <div id="board-modal-order" class="mb-3">
                            <label id="board-modal-order-label" for="board-modal-order-input" class="modal-label col-form-label">
                                Horizontal Position: (0 is first)
                            </label>
                            <input type="number" class="form-control" id="board-modal-order-input"/>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn board-btn btn-danger" id="board-modal-delete-btn">DELETE</button>
                    <button type="button" class="btn board-btn board-btn-green" id="board-modal-save-btn">SAVE</button>
                </div>
            </div>
        </div>
    </div>

    <div id="board" class="d-flex p-5">
<!--        <div class="descriptor">I am a board</div><br/>-->
        <div id="board-content" class="d-flex p-2 layout content board-sortable">

<!--            <div class="category mr-5 main">-->
<!--                <div class="mb-4 descriptor">PENDING</div>-->
<!--                <div class="list main">-->
<!--                    <div class="mb-3 descriptor">Incoming bugs</div>-->
<!--                    <div class="p-3 layout">-->
<!--                        <div class="card p-2 mb-3 main">-->
<!--                            <div class="card-body">Lightbox loading issue on Safari</div>-->
<!--                            <div class="card-footer"><i>*logos/indicators*</i></div>-->
<!--                        </div>-->
<!--                        <div class="card p-2 mb-3 main">-->
<!--                            <div class="card-body">Notifications Not Sending #4</div>-->
<!--                            <div class="card-footer"><i>*logos/indicators*</i></div>-->
<!--                        </div>-->
<!--                        <div class="card p-2 mb-3 main">-->
<!--                            <div class="card-body">Tab to comment goes to wrong field</div>-->
<!--                            <div class="card-footer"><i>*logos/indicators*</i></div>-->
<!--                        </div>-->
<!--                        <div class="card p-2 mb-3 main">-->
<!--                            <div class="card-body">Video load issues on IE 11</div>-->
<!--                            <div class="card-footer"><i>*logos/indicators*</i></div>-->
<!--                        </div>-->
<!--                        <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>-->
<!--                    </div>-->
<!--                </div>-->
<!--            </div>-->

<!--            <div class="category mr-5 main">-->
<!--                <div class="mb-4 descriptor">STARTED</div>-->
<!--                <div class="d-flex flex-column">-->
<!--                    <div class="section mb-4 main">-->
<!--                        <div class="descriptor">SMALLER WORK - <48 HR RESOLUTION</div>-->
<!--                        <div class="d-flex">-->

<!--                            &lt;!&ndash; TESTING FOR DRAGGABLES &ndash;&gt;-->

<!--                            <div class="list mr-3 main">-->
<!--                                <div class="mb-3 descriptor">In Progress</div>-->
<!--                                <div class="p-3 layout sortable">-->
<!--                                    <div class="card p-2 mb-3 main">-->
<!--                                        <div class="card-body ui-state-disabled">Localization</div>-->
<!--                                        <div class="card-footer ui-state-disabled"><i>*logos/indicators*</i></div>-->
<!--                                    </div>-->
<!--                                    <div class="card p-2 mb-3 main">-->
<!--                                        <img class="card-img-top ui-state-disabled" src="img/testimg.png"/>-->
<!--                                        <div class="card-body ui-state-disabled">"Like" button in comments</div>-->
<!--                                        <div class="card-footer ui-state-disabled"><i>*logos/indicators*</i></div>-->
<!--                                    </div>-->
<!--                                    <div class="card-filler ui-state-disabled">-->
<!--                                        <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>-->
<!--                                    </div>-->
<!--                                </div>-->
<!--                            </div>-->
<!--                            <div class="list mr-3 main">-->
<!--                                <div class="mb-3 descriptor">QA</div>-->
<!--                                <div class="p-3 layout sortable">-->
<!--                                    <div class="card p-2 mb-3 main">-->
<!--                                        <div class="card-body ui-state-disabled">Embed all the things</div>-->
<!--                                        <div class="card-footer ui-state-disabled"><i>*logos/indicators*</i></div>-->
<!--                                    </div>-->
<!--                                    <div class="card-filler"></div>-->
<!--                                    <div class="card-filler ui-state-disabled">-->
<!--                                        <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>-->
<!--                                    </div>-->
<!--                                </div>-->
<!--                            </div>-->

<!--                            &lt;!&ndash; END &ndash;&gt;-->

<!--                            <div class="list mr-3 main">-->
<!--                                <div class="mb-3 descriptor">Ready for launch</div>-->
<!--                                <div class="p-3 layout">-->
<!--                                    <div class="card-filler"></div>-->
<!--                                    <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>-->
<!--                                </div>-->
<!--                            </div>-->
<!--                            <div class="list main">-->
<!--                                <div class="mb-3 descriptor">Live</div>-->
<!--                                <div class="p-3 layout">-->
<!--                                    <div class="card-filler"></div>-->
<!--                                    <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>-->
<!--                                </div>-->
<!--                            </div>-->
<!--                        </div>-->
<!--                    </div>-->
<!--                    <div class="section mb-4 main">-->
<!--                        <div class="descriptor">MEDIUM COMPLEXITY - 3C APPROACH</div>-->
<!--                        <div class="d-flex">-->
<!--                            <div class="list mr-3 main">-->
<!--                                <div class="mb-3 descriptor">Concern raised</div>-->
<!--                                <div class="p-3 layout">-->
<!--                                    <div class="card p-2 mb-3 main">-->
<!--                                        <img class="card-img-top" src="img/testimg2.png"/>-->
<!--                                        <div class="card-body">Work on the same project</div>-->
<!--                                        <div class="card-footer"><i>*logos/indicators*</i></div>-->
<!--                                    </div>-->
<!--                                    <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>-->
<!--                                </div>-->
<!--                            </div>-->
<!--                            <div class="list mr-3 main">-->
<!--                                <div class="mb-3 descriptor">Contain issue</div>-->
<!--                                <div class="p-3 layout">-->
<!--                                    <div class="card-filler"></div>-->
<!--                                    <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>-->
<!--                                </div>-->
<!--                            </div>-->
<!--                            <div class="list mr-3 main">-->
<!--                                <div class="mb-3 descriptor">Countermeasure</div>-->
<!--                                <div class="p-3 layout">-->
<!--                                    <div class="card-filler"></div>-->
<!--                                    <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>-->
<!--                                </div>-->
<!--                            </div>-->
<!--                        </div>-->
<!--                    </div>-->
<!--                </div>-->
<!--            </div>-->

<!--            <div class="category pt-3 mr-5 main">-->
<!--                <div class="descriptor">CATEGORY 3</div>-->
<!--            </div>-->
        </div>
    </div>
</div>
</body>

</html>
