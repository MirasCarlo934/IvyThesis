<!DOCTYPE html>
<html lang="en">

<head>
    <title/>IvyThesis</title>
    <style>
        div.main {
            border: 3px solid black;
        }
        div.layout {
            border: 1px solid gray;
            min-width: 250px;
            /*min-height: 100px;*/
        }
        div.descriptor, div.name {
            border: 1px solid red;
        }
        div.board-container-sortable {
            border: 3px dashed yellow;
        }
        .card, .card-filler {
            width: 250px;
        }
        .card-placeholder {
            border: 5px solid red;
            height: 1px;
        }
    </style>
    <!-- Latest compiled and minified CSS -->
<!--    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.0/css/all.css" integrity="sha384-lZN37f5QGtY3VHgisS14W3ExzMWZxybE1SJSEsQp9S+oqd12jhcu+A56Ebc1zFSJ" crossorigin="anonymous">

    <!-- jQuery library -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js" integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"></script>
    <script src="js/jquery.ui.sortable-animation.js"></script>

    <!-- Popper JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>

    <!-- Latest compiled JavaScript -->
<!--    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>-->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js" integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf" crossorigin="anonymous"></script>

    <!-- Utility Libraries -->
    <script src="js/utilities.js"></script>

    <script>
        let ENV = "<%=env%>"
        let host = "<%=api.host%>";
        let categoriesPath = "<%=api.categoriesPath%>";
        let sectionsPath = "<%=api.sectionsPath%>";
        let listsPath = "<%=api.listsPath%>";
        let cardsPath = "<%=api.cardsPath%>";
        let containersPath = "<%-api.containersPath%>";

        let context = [];
        let totalResources = 0;
        let builtResources = 0;
        let menuOpen = false;

        let modalResource; // the current resource being modified by modal
        let $modalResourceDOM; // the current resource DOM being modified by modal
        let modalSaveCallback; // the callback function to be called by the modal save button
        let modalDeleteCallback; // the callback function to be called by the modal delete button

        let CardPostJson = function(name, description, listId, order) {
            return {
                "name": name,
                "description": description,
                "listId": listId,
                "order": order,
                "resourceType": "card"
            }
        }

        let CategoryPostJson = function(name, description, order) {
            return {
                "name": name,
                "description": description,
                "order": order,
                "orientation": "x",
                "parentId": "board"
            }
        }

        let sortFunc = function(a,b) {
            if (a.order < b.order) return -1;
            else if (a.order > b.order) return 1;
            else return 0;
        }

        let updateResourceOrdersInArr = function(resourceArr) {
            resourceArr.sort(sortFunc);
            let lastOrder = -1;
            for (let i = 0; i < resourceArr.length; i++) {
                let res = resourceArr[i];
                console.log(res.order);
                if (lastOrder === res.order) { // resource has been added, increment
                    res.order = res.order + 1;
                } else if (res.order - lastOrder > 1) { // resource has been deleted, decrement
                    res.order = res.order - 1;
                }
                lastOrder = res.order;
            }
            resourceArr.sort(sortFunc);
        }

        function apiUpdateResources(resourceArr = context) {
            if (ENV === "production" || ENV === "testing") {
                for (let i = 0; i < resourceArr.length; i++) {
                    let res = resourceArr[i];
                    let url = host;
                    if (res.resourceType === "category" || res.resourceType === "section") {
                        url = url + containersPath;
                    } else if (res.resourceType === "list") {
                        url = url + listsPath;
                    } else { // card
                        url = url + cardsPath;
                    }
                    url = url + "/" + res._id;
                    return $.ajax({
                        url: url,
                        type: "PUT",
                        data: res
                    });
                }
            }
        }

        function apiPutResource(url, data, successFunc) {
            if (ENV === "production" || ENV === "testing") {
                return $.ajax({
                    url: url,
                    type: "PUT",
                    data: data,
                    success: successFunc
                });
            } else {
                data._id = create_UUID();
                successFunc(data);
            }
        }

        function apiPostResource(url, data, successFunc) {
            if (ENV === "production" || ENV === "testing") {
                return $.ajax({
                    url: url,
                    type: "POST",
                    data: data,
                    success: successFunc
                });
            } else {
                data._id = create_UUID();
                successFunc(data);
            }
        }

        function apiDeleteResource(url, successFunc) {
            if (ENV === "production" || ENV === "testing") {
                return $.ajax({
                    url: url,
                    type: "DELETE",
                    success: successFunc
                });
            } else {
                successFunc("test data");
            }
        }

        function getResourceFromArray(resourceArr, resourceId) {
            if (resourceId === "board") {
                return {
                    children: context
                }
            }
            for (let i = 0; i < resourceArr.length; i++) {
                if (resourceArr[i]._id === resourceId) return resourceArr[i];
                else if (resourceArr[i].hasOwnProperty("children")) {
                    let resource = getResourceFromArray(resourceArr[i].children, resourceId);
                    if (resource !== null) return resource;
                }
            }
            return null;
        }

        function addResource(resourceArr, resource) {
            resourceArr.splice(resource.order, 0, resource);
            updateResourceOrdersInArr(resourceArr);
        }

        function deleteResource(resourceArr, resourceId) {
            for (let i = 0; i < resourceArr.length; i++) {
                if (resourceArr[i]._id === resourceId) {
                    resourceArr.splice(i);
                    updateResourceOrdersInArr(resourceArr);
                    return;
                }
                else if (resourceArr[i].hasOwnProperty("children")) {
                    deleteResource(resourceArr[i].children, resourceId);
                }
            }
        }

        let rearrangeChildrenBasedOnDOM = function(childrenDom) { // a function inside resource object
            if (!this.hasOwnProperty("_id")) return; // for invalid calls to this function
            for (let i = 0; i < childrenDom.length; i++) {
                let $childDom = $(childrenDom[i]);
                if ($childDom.attr("class").includes("filler")) continue; // reject filler divs
                let childRes = getResourceFromArray(context, $childDom.attr("id").split("-")[0]);
                let url;
                childRes.order = i;
                console.log(childRes.resourceType + ": " + childRes._id);
                if (childRes.resourceType === "container") {
                    childRes.parentId = this._id;
                    url = host + containersPath + "/" + childRes._id;
                } else if (childRes.resourceType === "list") {
                    childRes.parentId = this._id;
                    url = host + listsPath + "/" + childRes._id;
                } else { // card
                    url = host + cardsPath + "/" + childRes._id;
                    childRes.listId = this._id;
                }
                apiPutResource(url, childRes);
            }
            this.children.sort(sortFunc);
        }

        function buildResourceObj(baseObj, resourceType) {
            baseObj.resourceType = resourceType;
            baseObj.updateChildren = rearrangeChildrenBasedOnDOM;
            return baseObj;
        }

        function buildListResource(list) {
            totalResources++;
            list.children = [];
            // get children cards
            $.get(host + cardsPath + "?listId=" + list._id, function(data) {
                for (let i = 0; i < data.length; i++) {
                    data[i].resourceType = "card";
                    list.children.push(data[i]);
                }
                buildDOM();
            });
            return list;
        }

        function buildContainerResource(container) {
            let builtChildren = 0;
            totalResources++;
            container.children = [];
            // get child containers
            $.get(host + containersPath + "?parentId=" + container._id, function(data) {
                for (let i = 0; i < data.length; i++) {
                    let child = data[i];
                    if (!child.hasOwnProperty("name") || !child.name || child.orientation === "y") {
                        buildResourceObj(child, "container");
                    } else {
                        buildResourceObj(child, "section")
                    }
                    buildContainerResource(child);
                    container.children.push(child);
                }
                if (builtChildren) buildDOM();
                else builtChildren++;
            });
            // get child lists
            $.get(host + listsPath + "?parentId=" + container._id, function(data) {
                for (let i = 0; i < data.length; i++) {
                    let child = data[i];
                    buildResourceObj(child, "list");
                    buildListResource(child);
                    container.children.push(child);
                }
                if (builtChildren) buildDOM();
                else builtChildren++;
            });
        }

        /**
          * A one-time-call function after all the resources are retrieved at init
          */
        function buildDOM(buildNow) {
            builtResources++;
            if (builtResources === totalResources || buildNow) {
                let $board_content = $("#board-content");
                let $last;
                $board_content.html("");
                context.sort(sortFunc);
                for (let i = 0; i < context.length; i++) {
                    $last = buildResourceDOM(context[i], $board_content, "x", 0);
                }
                // remove margin of last child
                // if (context.length > 0) {
                //     let last_class = $last.attr("class").split(" ").pop();
                //     $last.removeClass(last_class);
                // }
            }
            setupJquery();
        }

        function buildResourceDOM(resource, $layout, layout_orientation, layout_layer) {
            let $dom = $("<div></div>");

            if (resource.resourceType === "category") {
                let container = resource;
                let $name = $("<div></div>");
                let $content = $("<div></div>");
                let $last;
                // DOM setup
                $dom.attr({
                    "id": container._id,
                    "class": "board-category main me-5"
                });
                $name.attr({
                    "id": container._id + "-" + "name",
                    "class": "board-category-name mb-4 ui-state-disabled"
                });
                $content.attr({
                    "id": container._id + "-" + "content",
                    "class": "layout d-flex ui-state-disabled board-category-sortable"
                });
                // build children
                for (let i = 0; i < container.children.length; i++) {
                    let res = container.children[i];
                    $last = buildResourceDOM(res, $content,  container.orientation, layout_layer + 1);
                }

                if (container.children.length === 0) {
                    // add filler to preserve size
                    // let $filler = $("<div></div>");
                    // $filler.attr("class", "card-filler ui-state-disabled");
                    // $content.append($filler);
                } else {
                    // remove margin of last child
                    // let margin_class = $last.attr("class").split(" ").pop();
                    // $last.removeClass(margin_class);
                }
                $name.html(container.name);
                $dom.append($name);
                $dom.append($content);
            } else if (resource.resourceType === "section") {
                let section = resource;
                let $name = $("<div></div>");
                let $content = $("<div></div>");
                let $last;
                // DOM setup
                $dom.attr({
                    "id": section._id,
                    "class": "board-section main mb-4"
                });
                $name.attr({
                    "id": section._id + "-" + "name",
                    "class": "board-section-name ui-state-disabled"
                });
                $content.attr({
                    "id": section._id + "-" + "content",
                    "class": "layout d-flex board-section-sortable"
                });
                // build children
                for (let i = 0; i < section.children.length; i++) {
                    let res = section.children[i];
                    $last = buildResourceDOM(res, $content,  section.orientation, layout_layer + 1);
                }
                $name.html(section.name);
                $dom.append($name);
                $dom.append($content);
            } else if (resource.resourceType === "container") {
                let container = resource;
                // DOM setup
                $dom.attr({
                    "id": container._id,
                    "class": "board-container d-flex flex-column layout ui-state-disabled board-container-sortable me-4"
                });
                // build children
                for (let i = 0; i < container.children.length; i++) {
                    let res = container.children[i];
                    buildResourceDOM(res, $dom,  container.orientation, layout_layer + 1);
                }
            } else if (resource.resourceType === "list") {
                let list = resource;
                let $name = $("<div></div>");
                let $content = $("<div></div>");
                let $last;
                $dom.attr({
                    "id": list._id,
                    "class": "board-list main me-3"
                });
                $name.attr({
                    "id": list._id + "-" + "name",
                    "class": "board-list-name ui-state-disabled mb-3"
                });
                $content.attr({
                    "id": list._id + "-" + "content",
                    "class": "p-3 layout ui-state-disabled board-list-sortable"
                });
                // add add_btn
                let $filler = $("<div class='card-filler'></div>");
                let $add_btn_container = $("<div></div>");
                let $add_btn = $("<button></button>")
                $add_btn.attr({
                    "id": list._id + "-add-btn",
                    "type": "button",
                    "class": "board-list-add-btn btn btn-primary"
                });
                $add_btn.html("<i class='fas fa-plus'></i>")
                $add_btn_container.attr("class", "board-list-add-btn-div ui-state-disabled");
                $add_btn_container.html($add_btn);
                $content.append($filler);
                $content.append($add_btn_container);
                // build children
                for (let i = 0; i < list.children.length; i++) {
                    let res = list.children[i];
                    $last = buildResourceDOM(res, $content,  "y", layout_layer + 1);
                }
                $name.html(list.name);
                $dom.append($name);
                $dom.append($content);
            } else if (resource.resourceType === "card") {
                let card = resource;
                let $body = $("<div></div>");
                $dom.attr({
                    "id": card._id,
                    "class": "board-card card main p-2 mb-3"
                });
                $body.attr({
                    "class": "card-body ui-state-disabled"
                });
                $body.html(card.name);
                $dom.append($body);
                $layout.find(".board-list-add-btn-div").before($dom);
                return $dom;
            }

            $layout.append($dom);
            return $dom;
        }

        function setupJquery() {

            // "add" modal configurations

            $(".board-list-add-btn").click(function() {
                let $modal = $("#board-modal");
                let $modal_title = $modal.find("#board-modal-title");
                let $modal_name_input = $modal.find("#board-modal-name-input");
                let $modal_desc_input = $modal.find("#board-modal-description-input");
                let $modal_order_input = $modal.find("#board-modal-order-input");
                let $modal_delete_btn = $modal.find("#board-modal-delete-btn");
                let listResource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
                modalResource = CardPostJson("noname", "nodesc", listResource._id, listResource.children.length);
                modalSaveCallback = function() { // modal callback
                    console.log("adding new card");
                    let $listContent = $("#" + listResource._id + "-content");
                    modalResource.name = $modal_name_input.val();
                    modalResource.description = $modal_desc_input.val();
                    apiPostResource(host + cardsPath, modalResource, function(data) { // callback after post success
                        data.resourceType = "card";
                        buildResourceDOM(data,  $listContent);
                        addResource(getResourceFromArray(listResource._id), data);
                        setupJquery();
                        console.log("new card added");
                    });
                    $modal.modal("hide");
                }
                $modal_order_input.hide();
                $modal_delete_btn.hide();
                $modal_title.html("Add new card");
                $modal_name_input.val("");
                $modal_desc_input.val("");
                $modal.modal("show");
            })

            // "edit" modal configurations

            $(".board-category-name").click(function() {
                let $modal = $("#board-modal");
                let $modal_title = $modal.find("#board-modal-title");
                let $modal_name_input = $modal.find("#board-modal-name-input");
                let $modal_desc_input = $modal.find("#board-modal-description-input");
                let $modal_order_input = $modal.find("#board-modal-order-input");
                let $modal_delete_btn = $modal.find("#board-modal-delete-btn");
                modalResource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
                $modalResourceDOM = $(this).parent();
                modalSaveCallback = function() {
                    modalResource.name = $modal_name_input.val();
                    modalResource.description = $modal_desc_input.val();
                    $modalResourceDOM.find("#" + modalResource._id + "-name").html(modalResource.name);
                    apiPutResource(host + containersPath + "/" + modalResource._id, modalResource);
                    $modal.modal("hide");
                }
                $modal_order_input.show();
                $modal_delete_btn.show();
                $modal_title.html("Edit category");
                $modal_name_input.val(modalResource.name);
                $modal_desc_input.val(modalResource.description);
                $modal.modal("show");
            });
            $(".board-section-name").click(function() {
                let $modal = $("#board-modal");
                let $modal_title = $modal.find("#board-modal-title");
                let $modal_name_input = $modal.find("#board-modal-name-input");
                let $modal_desc_input = $modal.find("#board-modal-description-input");
                let $modal_order_input = $modal.find("#board-modal-order-input");
                let $modal_delete_btn = $modal.find("#board-modal-delete-btn");
                modalResource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
                $modalResourceDOM = $(this).parent();
                modalSaveCallback = function() {
                    modalResource.name = $modal_name_input.val();
                    modalResource.description = $modal_desc_input.val();
                    $modalResourceDOM.find("#" + modalResource._id + "-name").html(modalResource.name);
                    apiPutResource(host + containersPath + "/" + modalResource._id, modalResource);
                    $modal.modal("hide");
                }
                $modal_order_input.show();
                $modal_delete_btn.show();
                $modal_title.html("Edit section");
                $modal_name_input.val(modalResource.name);
                $modal_desc_input.val(modalResource.description);
                $modal.modal("show");
            });
            $(".board-list-name").click(function() {
                let $modal = $("#board-modal");
                let $modal_title = $modal.find("#board-modal-title");
                let $modal_name_input = $modal.find("#board-modal-name-input");
                let $modal_desc_input = $modal.find("#board-modal-description-input");
                let $modal_order_input = $modal.find("#board-modal-order-input");
                let $modal_delete_btn = $modal.find("#board-modal-delete-btn");
                modalResource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
                $modalResourceDOM = $(this).parent();
                modalSaveCallback = function() {
                    modalResource.name = $modal_name_input.val();
                    modalResource.description = $modal_desc_input.val();
                    $modalResourceDOM.find("#" + modalResource._id + "-name").html(modalResource.name);
                    apiPutResource(host + listsPath + "/" + modalResource._id, modalResource);
                    $modal.modal("hide");
                }
                $modal_order_input.show();
                $modal_delete_btn.show();
                $modal_title.html("Edit list");
                $modal_name_input.val(modalResource.name);
                $modal_desc_input.val(modalResource.description);
                $modal.modal("show");
            });
            $(".board-card").click(function() {
                let $modal = $("#board-modal");
                let $modal_title = $modal.find("#board-modal-title");
                let $modal_name_input = $modal.find("#board-modal-name-input");
                let $modal_desc_input = $modal.find("#board-modal-description-input");
                let $modal_order_input = $modal.find("#board-modal-order-input");
                let $modal_delete_btn = $modal.find("#board-modal-delete-btn");
                modalResource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
                $modalResourceDOM = $(this);
                modalSaveCallback = function() {
                    modalResource.name = $modal_name_input.val();
                    modalResource.description = $modal_desc_input.val();
                    $modalResourceDOM.find(".card-body").html(modalResource.name);
                    apiPutResource(host + cardsPath + "/" + modalResource._id, modalResource);
                    $modal.modal("hide");
                }
                modalDeleteCallback = function() {
                    $modalResourceDOM.remove();
                    apiDeleteResource(host + cardsPath + "/" + modalResource._id);
                    deleteResource(context, modalResource._id);
                    $modal.modal("hide");
                }
                $modal_order_input.hide();
                $modal_delete_btn.show();
                $modal_title.html("Edit card");
                $modal_name_input.val(modalResource.name);
                $modal_desc_input.val(modalResource.description);
                $modal.modal("show");
            });

            // sortables

            // $(".board-sortable").sortable({
            //     items: "div:not(.ui-state-disabled)",
            //     connectWith: [".board-category-sortable", ".board-container-sortable", ".board-section-sortable"],
            //     placeholder: "card-placeholder",
            //     forcePlaceholderSize: true
            // })
            $(".board-list-sortable").sortable({
                items: "div:not(.ui-state-disabled, .board-category, .board-container, .board-section, .board-list)",
                connectWith: ".board-list-sortable",
                placeholder: "card-placeholder mb-3",
                forcePlaceholderSize: true,
                receive: function(event, ui) {
                    let resource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
                    resource.updateChildren($(this).children());
                },
                stop: function(event, ui) {
                    let resource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
                    resource.updateChildren($(this).children());
                }
            }).disableSelection();
            // $(".board-category-sortable").sortable({
            //     items: "div:not(.ui-state-disabled, .board-category)",
            //     connectWith: [".board-category-sortable", ".board-sortable", ".board-container-sortable"],
            //     placeholder: "card-placeholder mb-3",
            //     forcePlaceholderSize: true,
            //     activate: function(event, ui) {
            //         console.log("activate category");
            //     },
            //     start: function(event, ui) {
            //         console.log("start category");
            //         if (ui.item.is(".board-list")) {
            //             console.log("start sorting list");
            //             $(".board-container-sortable").sortable("disable");
            //             $(".board-container-sortable").sortable("refresh");
            //             $(this).sortable("refresh");
            //             console.log("disabled sorting for all containers")
            //         }
            //     },
            //     over: function(event, ui) {
            //         console.log("over category");
            //     },
            //     beforeStop: function(event, ui) {
            //         console.log("beforeStop category");
            //         if (ui.item.is(".board-list") && $(".board-container-sortable").find(".card-placeholder").length) {
            //             $(".board-container-sortable").sortable("disable");
            //         }
            //     },
            //     stop: function(event, ui) {
            //         console.log("stop category");
            //         if (ui.item.is(".board-list")) {
            //             $(".board-container-sortable").sortable("enable");
            //             $(".board-container-sortable").sortable("refresh");
            //             $(this).sortable("refresh");
            //             console.log("enabled sorting for all containers")
            //         }
            //         // let resource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
            //         // console.log(resource.name + " stopped sorting");
            //         // resource.updateChildren($(this).children());
            //     },
            //     receive: function(event, ui) {
            //         // let resource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
            //         // let margin_class = ui.item.attr("class").split(" ").pop();
            //         // console.log(resource.name + " received ui");
            //         // ui.item.removeClass(margin_class);
            //         // ui.item.addClass("mr-3"); // change this to be layer-dependent!
            //         // resource.updateChildren($(this).children());
            //     }
            // }).disableSelection();
            // $(".board-container-sortable").sortable({
            //     items: "div:not(.ui-state-disabled, .board-category, .board-container, .board-list)",
            //     connectWith: [".board-container-sortable", ".board-category-sortable"],
            //     placeholder: "card-placeholder mb-3",
            //     forcePlaceholderSize: true,
            //     activate: function(event, ui) {
            //         console.log("activate container");
            //     },
            //     start: function(event, ui) {
            //         console.log("start container");
            //     },
            //     over: function(event, ui) {
            //         console.log("over container");
            //     },
            //     stop: function(event, ui) {
            //         console.log("stop container");
            //         console.log(ui.item.attr("id"));
            //         // let resource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
            //         // console.log(resource.name + " stopped sorting");
            //         // resource.updateChildren($(this).children());
            //     },
            //     receive: function(event, ui) {
            //         console.log(ui.item.attr("id"));
            //         // let resource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
            //         // let margin_class = ui.item.attr("class").split(" ").pop();
            //         // console.log(resource.name + " received ui");
            //         // ui.item.removeClass(margin_class);
            //         // ui.item.addClass("mb-3"); // change this to be layer-dependent!
            //     }
            // }).disableSelection();
            // $(".board-section-sortable").sortable({
            //     items: "div:not(.ui-state-disabled, .board-category, .board-container, .board-section)",
            //     connectWith: [".board-section-sortable", ".board-sortable", ".board-category-sortable"],
            //     placeholder: "card-placeholder mb-3",
            //     forcePlaceholderSize: true,
            //     receive: function(event, ui) {
            //         // let resource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
            //         // let margin_class = ui.item.attr("class").split(" ").pop();
            //         // console.log(resource.name + " received ui");
            //         // ui.item.removeClass(margin_class);
            //         // ui.item.addClass("mb-3"); // change this to be layer-dependent!
            //     },
            //     stop: function(event, ui) {
            //         // let resource = getResourceFromArray(context, $(this).attr("id").split("-")[0]);
            //         // console.log(resource.name + " stopped sorting");
            //         // resource.updateChildren($(this).children());
            //     }
            // }).disableSelection();
        }

        // region start

        $(function() {

            // initializations
            $("#board-menu-items").hide();
            $("#board-modal-save-btn").click(function() {
                modalSaveCallback();
            });
            $("#board-modal-delete-btn").click(function() {
                modalDeleteCallback();
            });
            $("#board-menu-show-btn").click(function() {
                if (menuOpen) {
                    $("#board-menu-items").hide();
                } else {
                    $("#board-menu-items").show();
                }
                menuOpen = !menuOpen;
            });
            $("#board-menu-add-category").click(function() {
                let $modal = $("#board-modal");
                let $modal_title = $modal.find("#board-modal-title");
                let $modal_name_input = $modal.find("#board-modal-name-input");
                let $modal_desc_input = $modal.find("#board-modal-description-input");
                let $modal_order_input = $modal.find("#board-modal-order-input");
                let $modal_delete_btn = $modal.find("#board-modal-delete-btn");
                modalResource = CategoryPostJson("noname", "nodesc", 0);
                modalSaveCallback = function() { // modal callback
                    console.log("adding new category");
                    let parent = getResourceFromArray(context, "board");
                    let order = parseInt($modal_order_input.val());
                    if (order > parent.children.length + 1) {
                        order = parent.children.length + 1;
                    }
                    modalResource.name = $modal_name_input.val();
                    modalResource.description = $modal_desc_input.val();
                    modalResource.order = order;
                    apiPostResource(host + containersPath, modalResource, function(data) { // callback after post success
                        data.resourceType = "category";
                        data.children = [];
                        addResource(context, data);
                        buildDOM(true);
                        setupJquery();
                        apiUpdateResources();
                        console.log("new category added");
                    });
                    $modal.modal("hide");
                }
                $modal_order_input.attr({
                    "min": 0,
                    "max": context.length
                });
                $modal_order_input.show();
                $modal_delete_btn.hide();
                $modal_title.html("Add new category");
                $modal_name_input.val("");
                $modal_desc_input.val("");
                $modal.modal("show");
            });

            // build context
            $.get(host + containersPath + "?parentId=board", function(data) {
                for (let i = 0; i < data.length; i++) {
                    let container = data[i];
                    buildResourceObj(container, "category");
                    buildContainerResource(container);
                    context.push(container);
                }
            });
            $.get(host + listsPath + "?parentId=board", function(data) {
                for (let i = 0; i < data.length; i++) {
                    let list = data[i];
                    buildResourceObj(list, "list");
                    buildListResource(list);
                    context.push(list);
                }
            });

        });

        // endregion

    </script>
</head>

<body>
<!--    <img src="img/testimg.png" alt="Test"/>-->
<div class="layout-body container-fluid">

    <div id="board-menu" class="position-fixed bottom-0 end-0 p-4">
        <div id="board-menu-items" class="m-4">
            <button id="board-menu-add-category" type="button" class="btn btn-secondary float-end">Add a category</button><br/><br/>
            <button id="board-menu-add-section" type="button" class="btn btn-secondary float-end">Add a section</button><br/><br/>
            <button id="board-menu-add-list" type="button" class="btn btn-secondary float-end">Add a list</button><br/><br/>
        </div>
        <br/>
        <button id="board-menu-show-btn" type="button" class="btn btn-primary float-end"><i class="fas fa-plus"></i></button>
    </div>

<!--    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#board-modal" data-bs-whatever="@mdo">Open modal for @mdo</button>-->

    <!-- MODAL -->
    <div class="modal fade" id="board-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="board-modal-title">NO TITLE</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div id="board-modal-name" class="mb-3">
<!--                            <label for="recipient-name" class="col-form-label">Name:</label>-->
                            <input type="text" class="form-control" id="board-modal-name-input" placeholder="Name">
                        </div>
                        <div id="board-modal-description" class="mb-3">
                            <label for="board-modal-description-input" class="col-form-label">Description:</label>
                            <textarea class="form-control" id="board-modal-description-input"></textarea>
                        </div>
                        <div id="board-modal-description" class="mb-3">
                            <label for="board-modal-order-input" class="col-form-label">Position: (0 is first)</label>
                            <input type="number" class="form-control" id="board-modal-order-input"/>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" id="board-modal-delete-btn">Delete</button>
                    <button type="button" class="btn btn-primary" id="board-modal-save-btn">Save</button>
                </div>
            </div>
        </div>
    </div>

    <h1>
        <%= title %>
    </h1>
    <div id="board" class="layout-board layout">
        <div class="descriptor">I am a board</div><br/>
        <div id="board-content" class="d-flex p-2 layout content board-sortable">
            <div class="category mr-5 main">
                <div class="mb-4 descriptor">PENDING</div>
                <div class="list main">
                    <div class="mb-3 descriptor">Incoming bugs</div>
                    <div class="p-3 layout">
                        <div class="card p-2 mb-3 main">
                            <div class="card-body">Lightbox loading issue on Safari</div>
                            <div class="card-footer"><i>*logos/indicators*</i></div>
                        </div>
                        <div class="card p-2 mb-3 main">
                            <div class="card-body">Notifications Not Sending #4</div>
                            <div class="card-footer"><i>*logos/indicators*</i></div>
                        </div>
                        <div class="card p-2 mb-3 main">
                            <div class="card-body">Tab to comment goes to wrong field</div>
                            <div class="card-footer"><i>*logos/indicators*</i></div>
                        </div>
                        <div class="card p-2 mb-3 main">
                            <div class="card-body">Video load issues on IE 11</div>
                            <div class="card-footer"><i>*logos/indicators*</i></div>
                        </div>
                        <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>
                    </div>
                </div>
            </div>

            <div class="category mr-5 main">
                <div class="mb-4 descriptor">STARTED</div>
                <div class="d-flex flex-column">
                    <div class="section mb-4 main">
                        <div class="descriptor">SMALLER WORK - <48 HR RESOLUTION</div>
                        <div class="d-flex">

                            <!-- TESTING FOR DRAGGABLES -->

                            <div class="list mr-3 main">
                                <div class="mb-3 descriptor">In Progress</div>
                                <div class="p-3 layout sortable">
                                    <div class="card p-2 mb-3 main">
                                        <div class="card-body ui-state-disabled">Localization</div>
                                        <div class="card-footer ui-state-disabled"><i>*logos/indicators*</i></div>
                                    </div>
                                    <div class="card p-2 mb-3 main">
                                        <img class="card-img-top ui-state-disabled" src="img/testimg.png"/>
                                        <div class="card-body ui-state-disabled">"Like" button in comments</div>
                                        <div class="card-footer ui-state-disabled"><i>*logos/indicators*</i></div>
                                    </div>
                                    <div class="card-filler ui-state-disabled">
                                        <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>
                                    </div>
                                </div>
                            </div>
                            <div class="list mr-3 main">
                                <div class="mb-3 descriptor">QA</div>
                                <div class="p-3 layout sortable">
                                    <div class="card p-2 mb-3 main">
                                        <div class="card-body ui-state-disabled">Embed all the things</div>
                                        <div class="card-footer ui-state-disabled"><i>*logos/indicators*</i></div>
                                    </div>
                                    <div class="card-filler"></div>
                                    <div class="card-filler ui-state-disabled">
                                        <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>
                                    </div>
                                </div>
                            </div>

                            <!-- END -->

                            <div class="list mr-3 main">
                                <div class="mb-3 descriptor">Ready for launch</div>
                                <div class="p-3 layout">
                                    <div class="card-filler"></div>
                                    <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>
                                </div>
                            </div>
                            <div class="list main">
                                <div class="mb-3 descriptor">Live</div>
                                <div class="p-3 layout">
                                    <div class="card-filler"></div>
                                    <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="section mb-4 main">
                        <div class="descriptor">MEDIUM COMPLEXITY - 3C APPROACH</div>
                        <div class="d-flex">
                            <div class="list mr-3 main">
                                <div class="mb-3 descriptor">Concern raised</div>
                                <div class="p-3 layout">
                                    <div class="card p-2 mb-3 main">
                                        <img class="card-img-top" src="img/testimg2.png"/>
                                        <div class="card-body">Work on the same project</div>
                                        <div class="card-footer"><i>*logos/indicators*</i></div>
                                    </div>
                                    <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>
                                </div>
                            </div>
                            <div class="list mr-3 main">
                                <div class="mb-3 descriptor">Contain issue</div>
                                <div class="p-3 layout">
                                    <div class="card-filler"></div>
                                    <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>
                                </div>
                            </div>
                            <div class="list mr-3 main">
                                <div class="mb-3 descriptor">Countermeasure</div>
                                <div class="p-3 layout">
                                    <div class="card-filler"></div>
                                    <button type="button" class="btn btn-primary"><i class="fas fa-plus"></i></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

<!--            <div class="category pt-3 mr-5 main">-->
<!--                <div class="descriptor">CATEGORY 3</div>-->
<!--            </div>-->
        </div>
    </div>
</div>
</body>

</html>
